from BaseClass.start_class import RouterStore, CallbackDataFilter
from BaseClass.log_class import LogCLassAll
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram import types
from BaseClass.read_class import Read
from app.inline_button import app_menu
from app.inline_back import back_menu
from BaseClass.read_class import Images
from db_postgres.crud.expenses import add_expense, category_exists
from db_postgres.crud.plan_spending import add_plan_spending
from db_postgres.crud.shares import status_share_search

image_logo = Images.logo()

class Add_Finance(StatesGroup):
    waiting_category = State()
    waiting_sum = State()

@RouterStore.my_router.callback_query(CallbackDataFilter("add_category"))
async def add_category(callback: types.CallbackQuery, state: FSMContext):
    LogCLassAll().debug("Press button: add_category")
    await callback.answer()
    await callback.message.delete()
    await callback.message.answer("üëâ –í–≤–µ–¥–∏—Ç–µ üìÇ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤:",
                                  reply_markup=back_menu())
    await state.set_state(Add_Finance.waiting_category)
    
@RouterStore.my_router.message(Add_Finance.waiting_category)
async def add_sum_category(message: types.Message, state: FSMContext):
    if Read.search_symbol(message.text):
        await message.answer("üëâ –ü—Ä–æ—Å—Ç–∏ —è –Ω–µ —É–º–µ—é —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Å–∏–º–≤–æ–ª–æ–º '_'\n"
                             "–ü—Ä–∏–¥—É–º–∞–π –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ")
    else:
        if not await category_exists(user_id=message.from_user.id,
                           category=message.text):
            await state.update_data(category=message.text)
            await message.answer("üëâ –£–∫–∞–∂–∏—Ç–µ üí∞ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
            LogCLassAll().debug(f"Write category: {message.text} user {message.from_user.id}")
            await state.set_state(Add_Finance.waiting_sum)
        else:
            await message.answer(f'‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è üìÇ{message.text} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n'
                                 '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –µ—â–µ —Ä–∞–∑')
        
@RouterStore.my_router.message(Add_Finance.waiting_sum)
async def add_to_db(message: types.Message, state: FSMContext):
    LogCLassAll().debug(f"Write sum: {message.text} user {message.from_user.id}")
    data = await state.get_data()
    master = await status_share_search(message.from_user.id)
    if master:
        user_id = master.master_id
    else:
        user_id = message.from_user.id
    category = data.get("category")
    if await Read.checking_number(message.text):
        sum_money = round(float(message.text), 2)
        await add_plan_spending(user_id=user_id,
                        category=category,
                        amount_money=sum_money)
        await add_expense(user_id=user_id,
                    category=category,
                    amount_expenses=sum_money)
        await message.answer_photo(photo=image_logo,
                        caption=f'*‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è üìÇ{category} –¥–æ–±–∞–≤–ª–µ–Ω–∞*\n'
                        f'–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞—è —Å—É–º–º–∞ üí∞= {sum_money}',
                        parse_mode='Markdown',
                        reply_markup=app_menu())
        await state.clear()
    else:
        if any(ch.isalpha() for ch in message.text):
             await message.answer(f"üî¢ –•–º‚Ä¶ —Ç—É—Ç –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ, –∞ –Ω–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ üòÖ\n"
                                f"–í—ã –≤–≤–µ–ª–∏: {message.text}\n"
                                "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ")
        if ',' in message.text:
            await message.answer(f"üî¢ –•–º‚Ä¶ —Ç—É—Ç –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ, –∞ –Ω–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ üòÖ\n"
                                    f"–í—ã –≤–≤–µ–ª–∏: {message.text} \n"
                                    "–í–æ–∑–º–æ–∂–Ω–æ –Ω–∞–¥–æ –ø–æ–º–µ–Ω—è—Ç—å , –Ω–∞ .\n"
                                    "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ")